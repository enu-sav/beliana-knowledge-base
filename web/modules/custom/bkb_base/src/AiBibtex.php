<?php

declare(strict_types=1);

namespace Drupal\bkb_base;

use Drupal\ai\AiProviderPluginManager;
use Drupal\ai\OperationType\Chat\ChatInput;
use Drupal\ai\OperationType\Chat\ChatMessage;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\key\KeyRepositoryInterface;
use GuzzleHttp\Client;
use GuzzleHttp\TransferStats;

/**
 * AiBibtex class for generating BibTeX entries using OpenAI's API.
 *
 * This class interacts with OpenAI's language model to generate formatted
 * BibTeX entries based on user-provided input, such as citation details like
 * paper title, authors, year, and other relevant information. The class sends
 * requests to OpenAIâ€™s API, processes the responses, and returns the generated
 * BibTeX entry in string format.
 */
final class AiBibtex {

  /**
   * Constructs an AiBibtex object.
   */
  public function __construct(
    private readonly AiProviderPluginManager $aiProvider,
    private readonly ConfigFactoryInterface  $configFactory,
    private readonly KeyRepositoryInterface  $keyRepository,
  ) {
  }

  /**
   * Retrieves a BibTeX record using the Perplexity AI provider.
   *
   * This method generates a prompt for the Perplexity AI provider by replacing
   * `[source:title]` with the label of the provided source entity. It then
   * sends this prompt to the AI provider and returns the response as a BibTeX
   * record.
   *
   * @param string $label
   *   The source entity whose label will be used in the prompt.
   * @param string $prompt
   *   The prompt to send to the AI provider, which should include
   *   `[source:title]`.
   * @param string $model
   *
   * @return string
   *   The BibTeX record generated by the AI provider.
   */
  public function getBibtexPerplexity($label, $prompt, $model = ''): string {
    // Get the Perplexity provider
    $provider = $this->aiProvider->createInstance('perplexity');
    $promptReplaced = str_replace('[source:title]', $label, $prompt);

    // Create a chat message
    $messages[] = new ChatMessage('user', $promptReplaced);
    $input = new ChatInput($messages);
    // Get the response
    $model = $model ?? $this->configFactory->get('ai_perplexity.settings')
      ->get('default_model');
    $output = $provider->chat($input, $model);
    $response_text = $output->getNormalized()->getText();
    $response_text = str_replace(['```bibtex', '```'], '', $response_text);

    return $response_text;
  }

  /**
   * Retrieves a BibTeX record using the OpenAI API.
   *
   * This method sends a prompt to the OpenAI API, which includes the label of
   * the provided source entity. It then returns the response as a BibTeX
   * record.
   *
   * @param string $label
   *   The label to be appended to the prompt.
   * @param string $prompt
   *   The prompt to send to the OpenAI API.
   * @param string $model
   *
   * @return string
   *   The BibTeX record generated by the OpenAI API.
   */
  public function getBibtexOpenAI($label, $prompt, $model = ''): string {
    // Create a Guzzle client with a handler to capture response headers
    $guzzle = new Client([
      'on_stats' => function (TransferStats $stats) use (&$headers) {
        if ($stats->hasResponse()) {
          $headers = $stats->getResponse()->getHeaders();
        }
      },
    ]);

    $aiConfig = $this->configFactory->get('ai_provider_openai.settings');
    $key_id = $aiConfig->get('api_key');
    $api_key = $this->keyRepository->getKey($key_id)->getKeyValue();
    $promptReplaced = str_replace('[source:title]', $label, $prompt);

    if (empty($api_key)) {
      return '';
    }

    $model = $model ?? 'gpt-4o-mini';
    $content = $guzzle->request('POST', 'https://api.openai.com/v1/chat/completions', [ ///v1/completions
      'headers' => [
        'Authorization' => 'Bearer ' . $api_key,
      ],
      // Do not throw errors.
      'http_errors' => FALSE,
      'json' => [
        'model' => $model,
        'messages' => [
          [
            'role' => 'user',
            'content' => $promptReplaced,
          ],
        ],
      ],
    ]);

    $response = Json::decode($content->getBody()->getContents());

    if ($response) {
      // Access and print the content of the completion
      $response_text = $response['choices'][0]['message']['content'];
      $response_text = str_replace(['```bibtex', '```'], '', $response_text);
    }

    return $response_text;
  }

}
