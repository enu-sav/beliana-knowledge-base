<?php

/**
 * @file
 * Install, update and uninstall functions.
 */

use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Create "citation" for source entity
 */
function bkb_source_update_10001() {
  $module_name = 'bkb_source';
  $entity_type = 'source';
  $fields = [
    'citation',
  ];

  Drupal::entityTypeManager()->clearCachedDefinitions();
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definitions = \Drupal::service('entity_field.manager')
    ->getFieldDefinitions($entity_type, $entity_type);
  foreach ($fields as $field_name) {
    if (!empty($field_definitions[$field_name]) && $field_definitions[$field_name] instanceof FieldStorageDefinitionInterface) {
      $entity_definition_update_manager
        ->installFieldStorageDefinition(
          $field_name,
          $entity_type,
          $module_name,
          $field_definitions[$field_name]);
    }
  }
}

/**
 * Create "pages" for group entity
 */
function bkb_source_update_10002() {
  $module_name = 'bkb_source';
  $entity_type = 'source_group';
  $fields = [
    'pages',
  ];

  Drupal::entityTypeManager()->clearCachedDefinitions();
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definitions = \Drupal::service('entity_field.manager')
    ->getFieldDefinitions($entity_type, $entity_type);
  foreach ($fields as $field_name) {
    if (!empty($field_definitions[$field_name]) && $field_definitions[$field_name] instanceof FieldStorageDefinitionInterface) {
      $entity_definition_update_manager
        ->installFieldStorageDefinition(
          $field_name,
          $entity_type,
          $module_name,
          $field_definitions[$field_name]);
    }
  }
}
